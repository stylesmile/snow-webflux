package ${packageName}.controller;

import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.snow.common.annotation.Log;
import com.snow.common.core.domain.AjaxResult;
import com.snow.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
    #if($table.crud || $table.sub)
import com.snow.common.core.page.TableDataInfo;
#elseif($table.tree)
#end
import reactor.core.publisher.Mono;

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends EntityController<${ClassName}, ${pkColumn.javaType}, I${ClassName}ervice>
{
    /**
     * 查询${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:list')")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public Mono<TableDataInfo> list(${ClassName} cond)
    {
        return super.list(exchange, cond);
    }
#elseif($table.tree)
    public AjaxResult list(${ClassName} cond)
    {
        return super.list(exchange, cond);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public Mono<Void> export(ServerHttpResponse response, ${ClassName} cond)
    {
        return super.export(response, cond, ${ClassName}.class, "${functionName}数据");
    }

    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping(value = "/{id}")
    public Mono<AjaxResult> getInfo(@PathVariable("id") ${pkColumn.javaType} id)
    {
        return super.getInfo(id);
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public Mono<AjaxResult> insert(@RequestBody ${ClassName} data)
    {
        return startMono(() -> {
            return service.insert(data).map(this::toAjax);
        });
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:edit')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public Mono<AjaxResult> update(@RequestBody ${ClassName} data)
    {
        return startMono(() -> {
            return service.update(data).map(this::toAjax);
        });
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:remove')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
	@DeleteMapping("/{ids}")
    public Mono<AjaxResult> deleteByIds(@PathVariable ${pkColumn.javaType}[] ids)
    {
        return startMono(() -> {
            return service.deleteByIds(ids).map(this::toAjax);
        });
    }
}
